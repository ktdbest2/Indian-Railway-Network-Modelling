# -*- coding: utf-8 -*-
"""
Created on Wed Feb  1 01:58:46 2017

@author: abc
"""

import networkx as nx
import networkx
import pandas as pd
import matplotlib.pyplot as plt
import collections
import pylab as pl
import pylab
from scipy import *
import scipy.optimize as optimize
import powerlaw
import numpy as np
data=pd.read_csv("C:\\Users\\abc\\Desktop\\isl_wise_train_detail_03082015_v1.csv")
trainno=data.iloc[:,0]
stncode=data.iloc[0:69006,3]
trainname=data.iloc[0:69006,1]
g=networkx.MultiGraph()
stn=[]
for row in stncode:
    if row not in stn:
        stn.append(row)

for s in stn:
    g.add_node(s)
    
for s in stn: 
    for i in range(len(stncode)):
    
        if((s==stncode[i]) and (trainno[i]==trainno[i+1])):
        #g.add_node(stncode[i])
        #g.add_node(stncode[i+1])
            g.add_edge(stncode[i],stncode[i+1])
        if(i==len(stncode)-1):
            break

o=[]
stncode=data.iloc[0:69006,3]
for i in range(len(stncode)):
    if(trainno[i]==trainno[i+1]):
       print(trainno[i],trainno[i+1])
       temp=(stncode[i],stncode[i+1]) 
       o.append(temp)
u=networkx.Graph()


edge_u=[]  
edge_v=[]    
for i in range(len(o)):
    edge_u.append(o[i][0])
    edge_v.append(o[i][1]) 

n=len(set(edge_u))
d=len(set(edge_u))   
for s in set(edge_u):
    u.add_node(s)
for p in range(len(o)):
    u.add_edge(o[p][0],o[p][1])
    
import numpy as np
v=u
bb=nx.degree(u)    
ss=sorted(bb.items(), key=lambda x: x[1],reverse=True)    
ccd2sort=sorted(ccd2.items(), key=lambda x: x[1],reverse=True)    

kk=[]
v=u 

for su in range(len(tt)):
    v.remove_node(tt[su])
    
    
    graphi = list(nx.connected_component_subgraphs(v))
    j=len(graphi)
    j1=len(graphi[0])
    #j2=len(graphi[1])
    kk.append((su,j,j1))
    print(su,j)
ccdso5=[]    
for su in range(len(tt2)):
    v.remove_node(tt2[su])
    
    
    graphi = list(nx.connected_component_subgraphs(v))
    j=len(graphi)
    j1=len(graphi[0])
    #j2=len(graphi[1])
    ccdso5.append((su,j,j1))
    print(su,j)
    
tt=list(np.random.choice(z,len(z),p=w2,replace=False))
tt2=list(np.random.choice(ccdso,len(ccdso),p=ccdso2,replace=False))
    
    #j=graphi

kk1=[]
kk2=[]
kk3=[]
for n in range(len(kk)):
    cc=(kk[n][0]+1)/(len(kks)-1)
    kk1.append(cc)
    kk2.append(kk[n][1])    #jj.append(j)
    kk3.append(kk[n][2]/4344)
    
z=[]
w1=[]
for n in range(len(ss)):
    z.append(ss[n][0])
    w1.append(ss[n][1]/4343)
ccdso=[]
ccdso1=[]    
for n in range(len(ccd2sort)):
    ccdso.append(ccd2sort[n][0])
    ccdso1.append(ccd2sort[n][1])
ccdso2=[]
for n in range(len(ccdso1)-1):
    tr=ccdso1[n]/sum(ccdso1)
    ccdso2.append(tr)
w2=[]
ccdso3=[]
for n in range(len(w1)-1):
    tr=w1[n]/sum(w1)
    w2.append(tr)
w2.append(1-sum(w2))
ccdso2.append(1-sum(ccdso2))
v=u    
import random

kks=[]
for h in range(len(ss)):
    v.remove_node(random.choice(v.nodes()))
    graphi = list(nx.connected_component_subgraphs(v))
    j=len(graphi)
    
    try:
        j1=len(graphi[0])
        kks.append((h,j,j1))
        print(h,j)
    except:
        pass
kks1=[]
kks2=[]
kks3=[]
for n in range(len(kks)):
    cc=(kks[n][0]+1)/(len(kks)-1)
    kks1.append(cc)
    kks2.append(kks[n][1])
    kks3.append(kks[n][2]/4344)
plt.figure()
plt.grid(True)
plt.xlabel('fraction')
plt.ylabel('Number of components')
plt.title('Resilience Curve based on Degree Centrality')
plt.plot(kks1,kks2,label='Random')
plt.plot(kk1,kk2,color='r',label='Targeted')
plt.legend(['Random','Targeted '])
#plt.show()
plt.savefig('./ResilienceCurveNoofComponentsDegreeCentralityversion2.pdf')

plt.figure()
plt.grid(True)
plt.xlabel('fraction')
plt.ylabel('Fraction of nodes in major connected component')
plt.title('Resilience Curves with respect to Degree Centrality')
plt.plot(kks1,kks3,label='Random')
plt.plot(kk1,kk3,color='r',label='Targeted')
plt.legend(['Random','Targeted '])
#plt.show()
plt.savefig('./ResilienceCurveNoofnodesDegreeCentralityversion2.pdf')



plt.figure()
plt.grid(True)
plt.legend(['Random','Targeted'])
plt.xlabel('fraction')
plt.ylabel('Number of nodes in major connected components')
#plt.title('Log Log Degree Distribution')
plt.plot(kks1,kks3,'ro-')
plt.plot(kk1,kk3)
plt.show()



plt.xlim([1,2*25])
plt.loglog(in_values,in_hist,'ro-')
plt.savefig('./log_degree_distribution.pdf')

#plt.plot(in_values/len(ssnod),in_hist,'ro-')

ccd=nx.closeness_centrality(u, normalized=True)  
ccd2=nx.eigenvector_centrality(u, max_iter=100)
d=[]
ed=nx.edge_betweenness_centrality(u, normalized=True)
nod=nx.betweenness_centrality(u, normalized=True)
ssed=sorted(ed.items(), key=lambda x: x[1],reverse=True)
ssnod=sorted(nod.items(), key=lambda x: x[1],reverse=True)
ssnod2=sorted(ccd2.items(), key=lambda x: x[1],reverse=True)

f4=list(bb.values())
f5=list(nod.values())
f6=list(ccd.values())
f7=list(nod.values())
f8=list(ccd2.values())
f9=list(nod.values())
ll=[]
ll1=[]
ll2=[]
for hu in range(len(f4)):
    ll.append((f4[hu],f5[hu]))
for hu in range(len(f4)):
    ll1.append((f4[hu],f6[hu]))    
for hu in range(len(f4)):
    ll2.append((f4[hu],f8[hu]))
sos=sorted(ll, key = lambda x: int(x[0]))
sos1=sorted(ll1, key = lambda x: int(x[0]))
sos2=sorted(ll2, key = lambda x: int(x[0]))

lll1=[]
lll2=[]
lll3=[]
lll4=[]
lll5=[]
lll6=[]
for hu in range(len(sos)):
    lll1.append(sos[hu][0])
    lll2.append(sos[hu][1])
for hu in range(len(sos1)):
    lll3.append(sos1[hu][0])
    lll4.append(sos1[hu][1])
for hu in range(len(sos2)):
    lll5.append(sos2[hu][0])
    lll6.append(sos2[hu][1])

plt.figure()
plt.grid(True)
plt.xlabel('Degree')
plt.ylabel('Centrality')
plt.title('Degree-Centrality Correlation Curves')
plt.plot(lll1,lll2,color='b')
plt.plot(lll3,lll4,color='r')
plt.plot(lll5,lll2,color='g')
#plt.plot(kkse1,kkse2,label='Random')
plt.legend(['Betweeness ','Closeness','EigenVector'])
plt.show()
jj=[]
kk=[]
v=u

kked=[]
for h in range(len(ed)):
    m=random.choice(v.edges())
    v.remove_edge(m[0],m[1])
    graphi = list(nx.connected_component_subgraphs(v))
    j=len(graphi)
    j1=len(graphi[0])
    try:
        
        kked.append((h,j,j1))
        print(h,j)
    except:
        pass

kksed=[]
for h in range(len(tt1)):
    #uu=random.choice(z4[1:30])
    v.remove_edge(z4[tt1[h]][0],z4[tt1[h]][1])
    #z4.remove(uu)
    graphi = list(nx.connected_component_subgraphs(v))
    j=len(graphi)
    j1=len(graphi[0])
    kksed.append((h,j,j1))
    print(h,j)
    

z4=[]
r2=[]
for n in range(9468):
         z4.append(ssed[n][0])
         r2.append(ssed[n][1])
r3=[]
for n in range(len(r2)-1):
    tr=r2[n]/sum(r2)
    r3.append(tr)
r3.append(1-sum(r3))
tt1=list(np.random.choice(np.arange(9468),len(r3),p=r3,replace=False))

kksd1=[]
kksd2=[]
kksd3=[]
for n in range(len(kksed)):
    cc=(kksed[n][0]+1)/(len(kksed)-1)
    kksd1.append(cc)
    kksd2.append(kksed[n][1])
    kksd3.append(kksed[n][2]/4344)
    
kkse1=[]
kkse2=[]
kkse3=[]
for n in range(len(kked)):
    cc=(kked[n][0]+1)/(len(kksed)-1)
    kkse1.append(cc)
    kkse2.append(kked[n][1])
    kkse3.append(kked[n][2]/4344)
plt.figure()
plt.grid(True)
plt.xlabel('fraction')
plt.ylabel('Number of components')
plt.title('Resilience Curve based on Edge betweenness')
plt.plot(kksd1,kksd2,color='r',label='Targeted')
plt.plot(kkse1,kkse2,label='Random')
plt.legend(['Targeted ','Random'])
plt.savefig('./ResilienceCurveNoofComponentsEdgebetweenenssversion2.pdf')

plt.show()

plt.figure()
plt.grid(True)
plt.xlabel('fraction')
plt.ylabel('Fraction of nodes in major connected components')
plt.title('Resilience Curves with respect to edge betweeness')
plt.plot(kksd1,kksd3,color='r',label='Targeted')
plt.plot(kkse1,kkse3,label='Random')
plt.legend(['Targeted','Random'])

#plt.show()       
plt.savefig('./ResilienceCurveEdgebetweenenssversion2.pdf')
  
         
         
         
         
         
bb=nx.degree(u)
in_values = sorted(set(bb.values()))

fff=bb.values()
in_hist = [list(fff).count(x) for x in in_values]
in_hist1 = []
for x in in_hist:
    in_hist1.append(x/len(bb))           
plt.figure() # you need to first do ‘import pylab as plt’
plt.grid(True)
 # in-degree
plt.legend(['degree'])
plt.xlabel('Degree')
plt.ylabel('Fraction of nodes')
plt.title('Log Log Degree Distribution')
plt.xlim([1,2*25])
plt.loglog(in_values,in_hist1,'ro-')
#plt.loglog(in_values,gggg)
fit.power_law.plot_pdf( ax=plt.plot(),color= 'b',label='fit pdf')
plt.savefig('./log_degree_distribution.pdf')
#plt.plot(in_values, powerlaw.pdf(in_values, -0.647),'r-', label='powerlaw pdf')
plt.plot(in_values,in_hist,'ro-')
plt.savefig('./cam_net_degree_distribution.pdf')
plt.close()
from scipy.stats import powerlaw

rv = powerlaw(-0.647313)
n = len(ssnod)  # Number of nodes
#m = 4  # Number of initial links
seed = 100
G = nx.barabasi_albert_graph(n, seed)

data=[]
for xx in range(35):
    da=[in_values[xx],in_hist1[xx]]
    data.append(da)
fit = powerlaw.Fit(in_hist1)
fit.power_law.alpha 
gggg=fit.power_law.pdf()

x = in_values
y = in_hist
f_out = open('in_values_xy.txt','w')
print >> f_out, str((x,y))
f_out.close()


       

    

    
    
    
kki=[]
jji=[]
for h in range(len(ss)):
    u.remove_node(ss[h][0])
    graphi = list(nx.connected_component_subgraphs(u))
    j=len(graphi)
    j1=len(graphi[0])
    kki.append((j,j1))
    #j=graphi
    #jji.append(j)
    
    #diameter=nx.diameter(graphi[0])
    #print(diameter)
    #d.append(diameter)
    
pl.hist(nx.degree_histogram(u))
bb=nx.degree(u)
yy=max(bb.keys(), key=lambda k: bb[k])
key, value = max(bb.items(), key=lambda x:x[1])
ss=sorted(bb.items(), key=lambda x: x[1],reverse=True)



nx.density(u)
networkx.draw(u) 
nx.networkx_draw(g)         
ba_c = nx.degree_centrality(u)
ba_c3 = {k:int(v*(len(g)-1)) for k,v in ba_c.items()}
dictlist=[]
dictlist1=[]
dictlist2=[]
dictlist3=[]
temp=[]
p=u.degree()
for value in ba_c3.items():
    temp = [value]
    dictlist.append(temp)
for x in range(len(dictlist)):
    temp=dictlist[x][0][1]
    dictlist1.append(temp)
ba_c2 = dict(collections.Counter(ba_c.values()))
pl.hist(dictlist1)
pl.hist(ba_c2)
for value in ba_c2.items():
    temp = [value]
    dictlist2.append(temp)
for x in range(len(dictlist2)):
    temp=dictlist2[x][0][1]
    dictlist3.append(temp)
pl.hist(dictlist3)
pl.gca().set_xscale("log")
pl.show()
# To convert normalized degrees to raw degrees

ba_x,ba_y = log_binning(ba_c2,50)

plt.xscale('log')
plt.yscale('log')
plt.scatter(ba_x,ba_y,c='r',marker='s',s=50)
plt.scatter(ba_c2.keys(),ba_c2.values(),c='b',marker='x')
plt.xlim((1e-4,1e-1))
plt.ylim((.9,1e4))
plt.xlabel('Connections (normalized)')
plt.ylabel('Frequency')
plt.show()    
degree_sequence=sorted(nx.degree(g).values(),reverse=True) # degree sequence
#print "Degree sequence", degree_sequence
dmax=max(degree_sequence)
plt.loglog(degree_sequence,'b-',marker='o')
plt.title("Degree rank plot")
plt.ylabel("degree")
plt.xlabel("rank")

# draw graph in inset
#plt.axes([0.45,0.45,0.45,0.45])
#Gcc=sorted(nx.connected_component_subgraphs(g), key = len, reverse=True)[0]
#pos=nx.spring_layout(Gcc)
#plt.axis('off')
#nx.draw_networkx_nodes(Gcc,pos,node_size=20)
#nx.draw_networkx_edges(Gcc,pos,alpha=0.4)

#plt.savefig("degree_histogram.png")
#plt.show()

pos1=nx.spring_layout(u)

import plotly.plotly as py
from plotly.graph_objs import *
import plotly.offline as offline
from plotly import __version__
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)
print( __version__ )# requires version >= 1.9.0)
pos=nx.get_node_attributes(u,'pos')
pos=pos1
iplot([{"x": [1, 2, 3], "y": [3, 1, 6]}])
dmin=1
ncenter=0
for n in pos:
    x,y=pos[n]
    d=(x-0.5)**2+(y-0.5)**2
    if d<dmin:
        ncenter=n
        dmin=d
p=nx.single_source_shortest_path_length(g,ncenter)


def scatter_nodes(pos, labels=None, color=None, size=4, opacity=1):
    # pos is the dict of node positions
    # labels is a list  of labels of len(pos), to be displayed when hovering the mouse over the nodes
    # color is the color for nodes. When it is set as None the Plotly default color is used
    # size is the size of the dots representing the nodes
    #opacity is a value between [0,1] defining the node color opacity
    L=len(pos)
    trace = Scatter(x=[], y=[],  mode='markers', marker=Marker(size=[]))
    for key, value in pos.items():
        trace['x'].append(value[0])
        trace['y'].append(value[1])
    attrib=dict(name='', text=labels , hoverinfo='text', opacity=opacity) # a dict of Plotly node attributes
    trace=dict(trace, **attrib)# concatenate the dict trace and attrib
    trace['marker']['size']=size
    return trace
def scatter_edges(u, pos, line_color=None, line_width=1):
    trace = Scatter(x=[], y=[], mode='lines')
    for edge in u.edges():
        trace['x'] += [pos[edge[0]][0],pos[edge[1]][0], None]
        trace['y'] += [pos[edge[0]][1],pos[edge[1]][1], None]  
        trace['hoverinfo']='none'
        trace['line']['width']=line_width
        if line_color is not None: # when it is None a default Plotly color is used
            trace['line']['color']=line_color
    return trace
    
labels=[str(k)  for k in range(len(pos))] # labels are  set as being the nodes indices in the list of nodes
trace1=scatter_edges(u, pos)
trace2=scatter_nodes(pos, labels=labels)

width=5500
height=5500
axis=dict(showline=False, # hide axis line, grid, ticklabels and  title
          zeroline=False,
          showgrid=False,
          showticklabels=False,
          title='' 
          )
layout=Layout(title= 'Fruchterman Reingold  layout',  #
    font= Font(),
    showlegend=False,
    autosize=False,
    width=width,
    height=height,
    xaxis=XAxis(axis),
    yaxis=YAxis(axis),
    margin=Margin(
        l=40,
        r=40,
        b=85,
        t=100,
        pad=0,
       
    ),
    hovermode='closest',
    plot_bgcolor='#EFECEA', #set background color            
    )


data=Data([trace1, trace2])

fig = Figure(data=data, layout=layout)
plot(fig, filename='Network')











#Create Edges
#Add edges as disconnected lines in a single trace and nodes as a scatter trace
edge_trace = Scatter(
    x=[], 
    y=[], 
    line=Line(width=0.5,color='#888'),
    hoverinfo='none',
    mode='lines')

for edge in g.edges():
    x0, y0 = g.node[edge[0]]['pos']
    x1, y1 = g.node[edge[1]]['pos']
    edge_trace['x'] += [x0, x1, None]
    edge_trace['y'] += [y0, y1, None]

node_trace = Scatter(
    x=[], 
    y=[], 
    text=[],
    mode='markers', 
    hoverinfo='text',
    marker=Marker(
        showscale=True,
        # colorscale options
        # 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' |
        # Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'
        colorscale='YIGnBu',
        reversescale=True,
        color=[], 
        size=10,         
        colorbar=dict(
            thickness=15,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line=dict(width=2)))

for node in g.nodes():
    x, y = g.node[node]['pos']
    node_trace['x'].append(x)
    node_trace['y'].append(y)
for node, adjacencies in enumerate(g.adjacency_list()):
    node_trace['marker']['color'].append(len(adjacencies))
    node_info = '# of connections: '+str(len(adjacencies))
    node_trace['text'].append(node_info)

    
plot(Figure(data=Data([edge_trace, node_trace]),
             layout=Layout(
                title='<br>Network graph made with Python',
                titlefont=dict(size=16),
                showlegend=False,
                annotations=[ dict(
                    text="Python code: <a href='https://plot.ly/ipython-notebooks/network-graphs/'> https://plot.ly/ipython-notebooks/network-graphs/</a>",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                xaxis=XAxis(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=YAxis(showgrid=False, zeroline=False, showticklabels=False))))

plot(fig, filename='C:\\Users\\abc\\Desktop\\networkx.html')
from plotly.graph_objs import *
import numpy as np

x = np.random.randn(2000)
y = np.random.randn(2000)
iplot([Histogram2dContour(x=x, y=y, contours=Contours(coloring='heatmap')),
       Scatter(x=x, y=y, mode='markers', marker=Marker(color='white', size=3, opacity=0.3))], show_link=False)
